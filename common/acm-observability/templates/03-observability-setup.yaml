---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
    argocd.argoproj.io/sync-wave: "-2"
  name: acm-cli-job-sa-role
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - create
      - patch
  - apiGroups: [""]
    resources: ["pods", "pods/log"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["pods/exec"]
    verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: acm-gitops-rolebinding
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: acm-cli-job-sa-role
subjects:
  - kind: ServiceAccount
    name: cli-job-sa
    namespace: open-cluster-management-observability
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cli-job-sa
  namespace: open-cluster-management-observability
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
---
apiVersion: batch/v1
kind: Job
metadata:
  name: observability-setup
  namespace: open-cluster-management-observability
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  template:
    spec:
      containers:
        - image: registry.redhat.io/openshift4/ose-cli:latest
          command:
            - /bin/bash
            - -c
            - |
              echo "Retreive acm-observability bucket ACCESS_KEY and SECRET_KEY"
              ACCESS_KEY=""
              SECRET_KEY=""
              while [[ z$ACCESS_KEY == z ]]; do
                 ACCESS_KEY=$(oc exec -i vault-0 -n vault -- vault kv get -mount=secret -field=access_key {{ .Values.observabilityStorage.path }})
                 SECRET_KEY=$(oc exec -i vault-0 -n vault -- vault kv get -mount=secret -field=secret_key {{ .Values.observabilityStorage.path }})
                 BUCKET_NAME=$(oc exec -i vault-0 -n vault -- vault kv get -mount=secret -field=bucket {{ .Values.observabilityStorage.path }})
                 ENDPOINT=$(oc exec -i vault-0 -n vault -- vault kv get -mount=secret -field=endpoint {{ .Values.observabilityStorage.path }})
                 INSECURE=$(oc exec -i vault-0 -n vault -- vault kv get -mount=secret -field=insecure {{ .Values.observabilityStorage.path }})
              done;
              oc get secret thanos-object-storage -n open-cluster-management-observability
              if [[ $? == 1 ]]
              then
                echo "Create thanos object storage configuration"
                echo "---
                apiVersion: v1
                kind: Secret
                metadata:
                  name: thanos-object-storage
                  namespace: open-cluster-management-observability
                type: Opaque
                stringData:
                  thanos.yaml: |
                    type: s3
                    config:
                      bucket: $BUCKET_NAME
                      endpoint: $ENDPOINT
                      insecure: $INSECURE
                      access_key: $ACCESS_KEY
                      secret_key: $SECRET_KEY" | oc create -f -
              fi
              echo -n "thanos object storage configuration already exists"
          imagePullPolicy: IfNotPresent
          name: observability-setup
      dnsPolicy: ClusterFirst
      restartPolicy: OnFailure
      serviceAccount: cli-job-sa
      serviceAccountName: cli-job-sa
      terminationGracePeriodSeconds: 30